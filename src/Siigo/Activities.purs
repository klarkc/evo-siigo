module Siigo.Activities where
--  ( SiigoIden
--  , SiigoCustomer
--  , searchSiigoCustomers
--  ) where

--import Prelude
--  ( ($)
--  , (<>)
--  , show
--  , discard
--  , bind
--  , pure
--  )
----import Fetch.Wrapper (Fetch)
--import Fetch.Response (handleResponse)
--import Fetch.Yoga.Json (fromJSON)
--import Effect.Aff (Aff)
--import Effect.Aff.Class (liftAff)
--import Effect.Class (liftEffect)
--import Effect.Console (log)
--import Temporal.Activity (Activity, askInput, askEnv)
--
--type SiigoCustomer
--  = {}
--
--type SiigoIden
--  = String
--
--searchSiigoCustomers :: Activity
--searchSiigoCustomers =
--  unsafeRunActivityM do
--    iden :: SiigoIden <- askInput
--    { fetch } <- askEnv 
--    liftAff do
--      headers <- siigoAuth fetch
--      let
--        url = buildURL $ "customers?identification=" <> show iden
--
--        options = { headers }
--      liftEffect $ log $ "Fetching " <> url
--      res <- env.fetch url options
--      siigoCustomers :: Array SiigoCustomer <- handleResponse res $ fromJSON res.json
--      pure siigoCustomers
--
----buildURL :: String -> String
----buildURL path = baseUrl <> "/v1/" <> path
